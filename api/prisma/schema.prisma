// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Goal {
  id          String        @id @unique @default(cuid())
  goal        String
  description String?
  categories  String[]
  difficulty  Int?
  game        Game          @relation(fields: [gameId], references: [id])
  variants    GoalVariant[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  gameId      String
}

model GoalVariant {
  id          String   @id @unique @default(cuid())
  goal        String?
  description String?
  active      Boolean?
  baseGoal    Goal     @relation(fields: [goalId], references: [id])
  variant     Variant  @relation(fields: [variantId], references: [id])
  goalId      String
  variantId   String
}

model Variant {
  id          String        @id @unique @default(cuid())
  name        String
  description String
  goals       GoalVariant[]
  Game        Game?         @relation(fields: [gameId], references: [id])
  gameId      String?
}

model Game {
  id          String    @id @unique @default(cuid())
  name        String
  slug        String    @unique
  coverImage  String?
  variants    Variant[]
  goals       Goal[]
  owners      User[]    @relation("GameOwners")
  moderators  User[]    @relation("GameModerators")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  enableSRLv5 Boolean   @default(false)
  rooms       Room[]
}

model User {
  id             String         @id @unique @default(cuid())
  username       String         @unique
  email          String         @unique
  password       Bytes
  salt           Bytes
  connections    Connection[]
  staff          Boolean        @default(false)
  ownedGames     Game[]         @relation("GameOwners")
  moderatedGames Game[]         @relation("GameModerators")
  resetToken     PasswordReset?
}

model PasswordReset {
  id      String   @id @unique @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  token   String   @unique
  expires DateTime
  userId  String   @unique
}

model Connection {
  id           String            @id @unique @default(cuid())
  service      ConnectionService
  serviceId    String
  refreshToken String?
  user         User              @relation(fields: [userId], references: [id])
  userId       String
}

model Room {
  id           String       @id @unique @default(cuid())
  slug         String       @unique
  name         String
  private      Boolean
  password     String?
  history      RoomAction[]
  game         Game         @relation(fields: [gameId], references: [id])
  gameId       String
  board        String[]
  racetimeRoom String?
}

model RoomAction {
  id      String         @id @unique @default(cuid())
  room    Room           @relation(fields: [roomId], references: [id])
  action  RoomActionType
  payload Json
  roomId  String
}

enum RoomActionType {
  JOIN
  LEAVE
  MARK
  UNMARK
  CHAT
  CHANGECOLOR
}

enum ConnectionService {
  TWITCH
  DISCORD
  RACETIME
}
